var v=Object.defineProperty;var S=(n,t,e)=>t in n?v(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var o=(n,t,e)=>(S(n,typeof t!="symbol"?t+"":t,e),e);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const r of i)if(r.type==="childList")for(const a of r.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function e(i){const r={};return i.integrity&&(r.integrity=i.integrity),i.referrerPolicy&&(r.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?r.credentials="include":i.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function s(i){if(i.ep)return;i.ep=!0;const r=e(i);fetch(i.href,r)}})();class y{constructor(t){o(this,"sizePx");o(this,"ctx");this.ctx=y.getContext(t);const{width:e,height:s}=t.getBoundingClientRect();t.width=e,t.height=s,this.sizePx=e}static getContext(t){const e=t.getContext("2d");if(!e)throw Error("No ctx");return e}}const u={field:{length:7},snake:{initLength:3,moveFrequencyMs:300},colors:{grid:"#6b7280",snake:"#3b82f6",food:"#ef4444"}};function f(n,t){return Math.floor(Math.random()*(t-n+1))+n}var c=(n=>(n.x_pos="x_pos",n.x_neg="x_neg",n.y_pos="y_pos",n.y_neg="y_neg",n))(c||{});function m(){const n=Object.values(c),t=f(0,n.length-1);return n[t]}function w(n,t){return n[0]!==t[0]}class P{constructor(t,e,s,i){o(this,"_entity",null);this.canvas=t,this.lengthPx=e,this.position=s,this.borderColor=i}render(){this._entity?this.paint(this._entity.color):this.clear()}get entity(){return this._entity}set entity(t){var s,i;this._entity!==t&&((i=(s=this._entity)==null?void 0:s.onDestroy)==null||i.call(s)),this._entity=t}paint(t){this.canvas.ctx.fillStyle=t,this.canvas.ctx.fillRect(this.lengthPx*this.position.x,this.lengthPx*this.position.y,this.lengthPx,this.lengthPx)}clear(){this.canvas.ctx.clearRect(this.lengthPx*this.position.x,this.lengthPx*this.position.y,this.lengthPx,this.lengthPx),this.paintBorder()}paintBorder(){this.canvas.ctx.strokeStyle=this.borderColor,this.canvas.ctx.strokeRect(this.lengthPx*this.position.x,this.lengthPx*this.position.y,this.lengthPx,this.lengthPx)}}class l{constructor(t,e){this.x=t,this.y=e}static areEqual(t,e){return t.x===e.x&&t.y===e.y}static random(t){const e=f(0,t-1),s=f(0,t-1);return new l(e,s)}}class h{constructor(t){o(this,"length",u.field.length);o(this,"gridColor",u.colors.grid);o(this,"squares");o(this,"squareLengthPx");this.canvas=t;const e=h.getSquareLengthPx(t,this.length);this.squareLengthPx=e,this.squares=h.getInitialSquares(t,this.length,e,this.gridColor)}initRender(){this.squares.forEach(t=>t.forEach(e=>{e.render()})),this.paintInitBorder()}updateSquare(t,e){const s=this.getSquare(t);s.entity=e}renderSquare(t){this.getSquare(t).render()}getRandomFreePosition(){const t=l.random(this.length);return this.getSquare(t).entity===null?t:this.getRandomFreePosition()}getSquare(t){return this.squares[t.y][t.x]}paintInitBorder(){this.canvas.ctx.strokeStyle=this.gridColor,this.canvas.ctx.strokeRect(0,0,this.length*this.squareLengthPx,this.length*this.squareLengthPx)}static getConnectedSquare(t,e){let{x:s,y:i}=e;switch(t){case c.x_pos:s++;break;case c.x_neg:s--;break;case c.y_pos:i++;break;case c.y_neg:i--;break}return new l(s,i)}static getLastSquare(t){const e=t.at(-1);if(!e)throw Error("getLastSquare error");return e}static isValidSquare(t,e){const{x:s,y:i}=t;return s>=0&&i>=0&&s<e&&i<e}static getSquareLengthPx(t,e){return Math.floor(t.sizePx/e)}static getInitialSquares(t,e,s,i){const r=[];for(let a=0;a<e;a++){r[a]=[];for(let d=0;d<e;d++)r[a][d]=new P(t,s,new l(d,a),i)}return r}}class x{constructor(t,e,s){o(this,"color",u.colors.food);this.field=t,this.position=e,this.onEaten=s,this.field.updateSquare(e,this)}initRender(){this.field.renderSquare(this.position)}onDestroy(){this.onEaten()}}class b{constructor(t){o(this,"food");this.field=t}init(){this.generateFood()}generateFood(){this.food=new x(this.field,this.field.getRandomFreePosition(),this.onEaten.bind(this)),this.food.initRender()}onEaten(){this.generateFood()}}const q={ArrowLeft:c.x_neg,ArrowRight:c.x_pos,ArrowUp:c.y_neg,ArrowDown:c.y_pos};class _{constructor(t){this.actions=t}listen(){document.addEventListener("keydown",({key:t})=>{C(t)&&this.actions.changeDirection(q[t])})}}function C(n){return Object.keys(q).includes(n)}class g{constructor(t,e){o(this,"color",u.colors.snake);o(this,"_direction");o(this,"requestedDirection");o(this,"moveInterval");o(this,"body");o(this,"initLength",u.snake.initLength);o(this,"moveFrequency",u.snake.moveFrequencyMs);this.field=t,this.onCollapse=e;const s=m(),i=g.getInitialBody(s,this.initLength,t.length);i.forEach(r=>t.updateSquare(r,this)),this._direction=s,this.body=i}startMoving(){this.moveInterval=setInterval(()=>this.move(),this.moveFrequency)}stopMoving(){clearInterval(this.moveInterval)}move(){this.requestedDirection&&(this._direction=this.requestedDirection,this.requestedDirection=void 0);const t=this.getMove(),e=this.willEat(t);if(this.willCollapse(t)){this.stopMoving(),this.onCollapse();return}this.grow(t),e||this.trimTail()}get direction(){return this._direction}set direction(t){w(this.direction,t)&&(this.requestedDirection=t)}grow(t){this.body.push(t),this.field.updateSquare(t,this),this.field.renderSquare(t)}trimTail(){const t=this.body.shift();if(!t)throw Error("Snake move error");this.field.updateSquare(t,null),this.field.renderSquare(t)}willCollapse(t){return this.field.getSquare(t).entity===this}willEat(t){return this.field.getSquare(t).entity instanceof x}getMove(){const t=h.getLastSquare(this.body),e=h.getConnectedSquare(this._direction,t),s={x:e.x,y:e.y};return["x","y"].forEach(r=>{e[r]>=this.field.length&&(s[r]=0),e[r]<0&&(s[r]=this.field.length-1)}),new l(s.x,s.y)}static getInitialBody(t,e,s){const r=[l.random(s)];for(let a=1;a<e;a++){const d=h.getLastSquare(r);r.push(h.getConnectedSquare(t,d))}return h.isValidSquare(h.getLastSquare(r),s)?r:g.getInitialBody(t,e,s)}}class E{constructor(t){o(this,"field");o(this,"snake");o(this,"keyboard");o(this,"foodManager");const e=new y(t),s=new h(e),i=new g(s,this.onLoss);this.field=s,this.snake=i,this.keyboard=new _({changeDirection:r=>this.snake.direction=r}),this.foodManager=new b(s)}start(){this.field.initRender(),this.snake.startMoving(),this.foodManager.init(),this.keyboard.listen()}onLoss(){alert("you lost")}}const p=document.querySelector("#canvas");if(!p)throw Error("No canvas");const L=new E(p);L.start();
